// Generated by typings
// Source: https://gist.githubusercontent.com/legokichi/c3d5420057bcb554dc11/raw/8267e95a31b0bcee392a100f29b34f1480aeda9e/surfaces_txt2yaml.d.ts

declare module SurfacesTxt2Yaml {
  export interface SurfacesTxt {
    charset: string;
    descript: SurfaceDescript;
    surfaces: { [key: string]: SurfaceDefinition; };
    aliases: { [scope: string]: { [aliasname: string]: number[]; }; };
    regions: { [scope: string]: {[regionName: string]: ToolTipElement}; };
  }

  export interface ToolTipElement {
    tooltip: string;
    cursor: {
      mouseup: string;
      mousedown: string;
    };
  }
  export interface SurfaceDescript {
    version: number;
    maxwidth: number;
    "collision-sort": string;
    "animation-sort": string;
  }

  export interface SurfaceDefinition {
    is: number;
    characters: { sakura: string; };
    points: {
      centerx: number;
      centery: number;
      kinoko: { centerx: number; centery: number; },
      basepos: { x: number; y: number; };
    };
    balloons: {
      sakura: { offsetx: number; offsety: number; };
      offsetx: number;
      offsety: number;
    };
    regions: { [key: string]: SurfaceRegion; };
    animations: { [key: string]: SurfaceAnimation; };
    elements: { [key: string]: ElementPattern; };
    base: string[];
  }

  export interface ElementPattern {
    is: number,
    type: string,
    file: string,
    x: number,
    y: number
  }

  export interface SurfaceAnimation {
    is: number;
    interval: string;
    option: string;
    patterns: SurfaceAnimationPattern[];
    regions: { [key: string]: SurfaceRegion; };
  }

  export interface SurfaceAnimationPatternBase {
    // 'overlay', 'overlayfast', 'reduce', 'replace', 'interpolate', 'asis', 'bind', 'add', 'reduce', 'move'
    type: string;
    surface: number;
    wait: string;
    x: number;
    y: number;
  }

  export interface SurfaceAnimationPatternAlternative extends SurfaceAnimationPatternBase {
    // 'alternativestart', 'alternativestop'
    animation_ids: number[];
  }

  export interface SurfaceAnimationPatternInsert extends SurfaceAnimationPatternBase {
    //  'insert', 'start', 'stop'
    animation_id: string;
  }

  export type SurfaceAnimationPattern = SurfaceAnimationPatternBase | SurfaceAnimationPatternAlternative | SurfaceAnimationPatternInsert;

  export interface SurfaceRegionBase {
    is: number;
    name: string;
    type: string;
  }

  export interface SurfaceRegionRect extends SurfaceRegionBase {
    left: number;
    top: number;
    right: number;
    bottom: number;
  }

  export interface SurfaceRegionCircle extends SurfaceRegionBase {
    center_x: number;
    center_y: number;
    radius: number;
  }

  export interface SurfaceRegionEllipse extends SurfaceRegionBase {
    left: number;
    top: number;
    right: number;
    bottom: number;
  }

  export interface SurfaceRegionPolygon extends SurfaceRegionBase {
    coordinates: { x: number; y: number; }[];
  }

  export type SurfaceRegion = SurfaceRegionRect | SurfaceRegionCircle | SurfaceRegionEllipse | SurfaceRegionPolygon;
  export function txt_to_data(text: string, option?: {}): SurfacesTxt;
}

declare module "surfaces_txt2yaml" {
  export = SurfacesTxt2Yaml;
}
